# Exclusions
--exclude .github

# Swift Version
--swiftversion 5.9

# Minimum SwiftFormat Version
--minversion 0.51.00

# Prefer comma over && in if, guard or while conditions.
--rules andOperator

# Prefer AnyObject over class in protocol definitions.
--rules anyObjectProtocol

# Changes all instances of assert(false, ...) to assertionFailure(...) and precondition(false, ...) to preconditionFailure(...).
--rules assertionFailures

# Insert blank line before and after MARK: comments.
--rules blankLinesAroundMark
--lineaftermarks true

# Remove trailing blank line at the end of a scope.
--rules blankLinesAtEndOfScope

# Remove leading blank line at the start of a scope.
--rules blankLinesAtStartOfScope

# Remove blank lines between import statements.
--rules blankLinesBetweenImports

# Insert blank line before class, struct, enum, extension, protocol or function declarations.
--rules blankLinesBetweenScopes

# Changes block comments to single line comments.
--rules blockComments

# Wrap braces in accordance with selected style (K&R or Allman).
--rules braces
--allman false

# Replace consecutive blank lines with a single blank line.
--rules consecutiveBlankLines

# Replace consecutive spaces with a single space.
--rules consecutiveSpaces

# Remove duplicate import statements.
--rules duplicateImports

# Place else, catch or while keyword in accordance with current style (same or next line).
--rules elseOnSameLine
--elseposition same-line
--guardelse auto

# Remove whitespace inside empty braces.
--rules emptyBraces
--emptybraces no-space

# Converts types used for hosting only static members into enums (an empty enum is the canonical way to create a namespace in Swift as it can't be instantiated).
--rules enumNamespaces

# Configure the placement of an extension's access control keyword.
--rules extensionAccessControl
--extensionacl on-declarations

# Use specified source file header template for all files.
--rules fileHeader
--header "{file}\nCopyright (c) {year} hiimtmac inc."

# Reposition let or var bindings within pattern.
--rules hoistPatternLet
--patternlet hoist

# Indent code in accordance with the scope level.
--rules indent
--indent 4
--smarttabs enabled
--indentcase false
--ifdef no-indent
--xcodeindentation disabled
--indentstrings true

# Add @available(*, unavailable) attribute to required init(coder:) when it hasn't been implemented.
--rules initCoderUnavailable

# Prefer isEmpty over comparing count against zero.
--rules isEmpty

# Move leading delimiters to the end of the previous line.
--rules leadingDelimiters

# Add empty blank line at end of file.
--rules linebreakAtEndOfFile

# Use specified linebreak character for all linebreaks (CR, LF or CRLF).
--rules linebreaks
--linebreaks lf

# Use consistent ordering for member modifiers. (https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_declaration-modifiers)
--rules modifierOrder
--modifierorder open,public,internal,fileprivate,private,\
        override,final,optional,\
        class,static,\
        mutating,nonmutating,\
        isolated,nonisolated,\
        dynamic,lazy,\
        weak,unowned,\
        required,convenience,\
        prefix,infix,postfix

# Use consistent formatting for numeric literals.
--rules numberFormatting
--decimalgrouping 3,6
--binarygrouping 4,8
--hexgrouping 4,8
--fractiongrouping disabled
--exponentgrouping disabled
--hexliteralcase lowercase
--exponentcase lowercase

# Convert trivial map { $0.foo } closures to keyPath-based syntax.
--rules preferKeyPath

# Remove redundant backticks around identifiers.
--rules redundantBackticks

# Remove redundant break in switch case.
--rules redundantBreak

# Removes redundant closures bodies, containing a single statement, which are called immediately.
--rules redundantClosure

# Remove redundant access control modifiers.
--rules redundantExtensionACL

# Prefer private over fileprivate where equivalent.
--rules redundantFileprivate

# Remove unneeded get clause inside computed properties.
--rules redundantGet

# Remove redundant let/var from ignored variables.
--rules redundantLet

# Remove redundant let error from catch clause.
--rules redundantLetError

# Remove redundant nil default value (Optional vars are nil by default).
--rules redundantNilInit

# Remove redundant @objc annotations.
--rules redundantObjc

# Remove redundant parentheses.
--rules redundantParens

# Remove redundant pattern matching parameter syntax.
--rules redundantPattern

# Remove redundant raw string values for enum cases.
--rules redundantRawValues

# Remove unneeded return keyword.
--rules redundantReturn

# Remove redundant type from variable declarations.
--rules redundantType
--redundanttype infer-locals-only

# Remove explicit Void return type.
--rules redundantVoidReturnType
--closurevoid preserve

# Remove semicolons.
--rules semicolons
--semicolons inline

# Sort import statements alphabetically.
--rules sortImports
--importgrouping testable-last

# Add or remove space around curly braces.
--rules spaceAroundBraces

# Add or remove space around square brackets.
--rules spaceAroundBrackets

# Add space before and/or after comments.
--rules spaceAroundComments

# Remove space around angle brackets.
--rules spaceAroundGenerics

# Add or remove space around operators or delimiters.
--rules spaceAroundOperators
--operatorfunc spaced
--ranges spaced

# Add or remove space around parentheses.
--rules spaceAroundParens

# Add space inside curly braces.
--rules spaceInsideBraces

# Remove space inside square brackets.
--rules spaceInsideBrackets

# Add leading and/or trailing space inside comments.
--rules spaceInsideComments

# Remove space inside angle brackets.
--rules spaceInsideGenerics

# Remove space inside parentheses.
--rules spaceInsideParens

# Remove backticks around self in Optional unwrap expressions.
--rules strongifiedSelf

# Use correct formatting for TODO:, MARK: or FIXME: comments.
--rules todos

# Use trailing closure syntax where applicable.
--rules trailingClosures

# Remove trailing space at end of a line.
--rules trailingSpace
--trimwhitespace always

# Prefer shorthand syntax for Arrays, Dictionaries and Optionals.
--rules typeSugar
--shortoptionals always

# Mark unused function arguments with _.
--rules unusedArguments
--stripunusedargs closure-only

# Use Void for type declarations and () for values.
--rules void
--voidtype void

# Align wrapped function arguments or collection elements.
--rules wrapArguments
--wraparguments before-first
--wrapparameters before-first
--wrapcollections before-first
--closingparen balanced
--wrapreturntype preserve
--wrapconditions before-first
--wraptypealiases before-first

# Wrap @attributes onto a separate line, or keep them on the same line.
--rules wrapAttributes
--funcattributes preserve
--typeattributes prev-line
--varattributes preserve

# Writes one enum case per line.
--rules wrapEnumCases

# Put open braces of multiline conditions on their own line
--rules wrapMultilineStatementBraces
